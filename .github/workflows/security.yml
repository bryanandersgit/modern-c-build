name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Mondays

permissions:
  contents: read

jobs:
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    environment: Build
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # Don't fail the build on vulnerabilities

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'

      - name: Upload Trivy results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results
          path: trivy-results.sarif
          retention-days: 30

# temporarily disabled to save build time
#  codeql-scan:
#    name: CodeQL Security Analysis
#    runs-on: ubuntu-latest
#    permissions:
#      actions: read
#      contents: read
#      security-events: write
#
#    strategy:
#      fail-fast: false
#      matrix:
#        language: [ 'c' ]
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Initialize CodeQL
#        uses: github/codeql-action/init@v3
#        with:
#          languages: ${{ matrix.language }}
#          queries: security-extended,security-and-quality
#
#      - name: Install build dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y build-essential cmake ninja-build
#
#      - name: Setup vcpkg
#        uses: lukka/run-vcpkg@v11
#        with:
#          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
#          vcpkgGitCommitId: '${{ vars.VCPKG_COMMIT_ID }}'
#          vcpkgJsonGlob: '**/vcpkg.json'
#
#      - name: Configure and Build
#        run: |
#          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
#          cmake --build build
#
#      - name: Perform CodeQL Analysis
#        uses: github/codeql-action/analyze@v3
#        with:
#          category: '/language:${{ matrix.language }}'

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    environment: Build
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: critical
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, Unlicense

  secrets-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    environment: Build
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup gitleaks
        run: |
          # Install gitleaks directly
          wget https://github.com/zricethezav/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/

      - name: Run gitleaks on current files only
        run: |
          # Scan only current files, not git history
          gitleaks detect --source . --no-git --verbose

  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    environment: Build
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '${{ vars.VCPKG_COMMIT_ID }}'
          vcpkgJsonGlob: '**/vcpkg.json'

      - name: Check dependency licenses
        run: |
          echo "=== Dependency License Report ==="
          if [ -f "build/vcpkg_installed/x64-linux/share" ]; then
            find build/vcpkg_installed/x64-linux/share -name "copyright" -exec echo "Package: {}" \; -exec cat {} \; -exec echo "---" \;
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: |
            build/vcpkg_installed/x64-linux/share/*/copyright
          retention-days: 30
          if-no-files-found: ignore